<<<<<<< HEAD
paste("**", cars$speed, "**", sep = "")
paste("_", cars$dist, "_", sep = "")
v1 <- paste("**", cars$speed, "**", sep = "")
v2 <- paste("_", cars$dist, "_", sep = "")
?cars
View(cars)
car_styled <- cars
View(car_styled)
knitr::opts_chunk$set(echo = TRUE)
kable(cars_styled)
View(car_styled)
car_styled <- c(paste("**", cars$speed, "**"), paste("_", cars$dist, "_"))
car_styled <- data.frame(c(paste("**", cars$speed, "**"), paste("_", cars$dist, "_")))
View(car_styled)
car_styled <- data.frame(paste("**", cars$speed, "**"))
View(car_styled)
df <- paste("**", cars$speed, "**")
car_styled <-data.frame(df)
View(car_styled)
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars$speed <- paste("**", cars$speed, "**", sep = "")
cars$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars$speed <- paste("**", cars$speed, "**", sep = "")
cars$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars
View(cars_styled)
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_styled <-  c(paste("**", cars$speed, "**", sep = ""), paste("_", cars$dist, "_", sep = ""))
cars_mark <- cars %>%
paste("**", cars$speed, "**", sep = "") %>%
paste("_", cars$dist, "_", sep = "")
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars_mark$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars_mark$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars_mark$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars_mark$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_styled <- cars
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
car_speed <- paste("**", cars$speed, "**", sep = "")
car_dist<- paste("_", cars$dist, "_", sep = "")
cars_styled <- data.frame(car_speed, car_dist)
View(cars_styled)
View(cars_styled)
install.packages("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage()
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage()
View(ui)
shiny::runApp('info201/ch16-shiny/exercise-3')
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mtcars$mpg)
runApp('info201/ch16-shiny/exercise-3')
runApp('info201/ch16-shiny/exercise-3')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
shiny::runApp('info201/ch16-shiny/exercise-5')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
View(midwest)
?midwest
library(dplyr)
library(ggplot2)
library(plotly)
# Constructing the dataframe with relevant columns
midwest <- midwest %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
midwest <- aggregate(midwest[, 2:6], by = list(midwest$state), mean)
midwest[1, 1] <- state.name[grep(midwest[1, 1], state.abb)]
midwest[2, 1] <- state.name[grep(midwest[2, 1], state.abb)]
midwest[3, 1] <- state.name[grep(midwest[3, 1], state.abb)]
midwest[4, 1] <- state.name[grep(midwest[4, 1], state.abb)]
midwest[5, 1] <- state.name[grep(midwest[5, 1], state.abb)]
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204,204,204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
data <- midwest$state
View(midwest)
rename(midwest, Group.1 = "state")
rename(midwest$Group.1, Group.1 = "state")
rename(midwest, Group.1 = "state")
View(midwest)
rename(midwest, state = Group.1)
midwest <- rename(midwest, state = Group.1)
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204,204,204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[,2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[,3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[,4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[,5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[,6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[,2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[,3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[,4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[,5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[,6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
library(dplyr)
library(ggplot2)
library(plotly)
View(midwest)
library(dplyr)
library(ggplot2)
library(plotly)
View(midwest)
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
colnames(midwest)
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/ch16-shiny/exercise-5')
View(midwest)
?midwest
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
dataset <- midwest %>%
filter(state == input_state) %>%
select(state,
paste0(input, "white"),
paste0(input, "amerindian"),
paste0(input, "black"),
paste0(input, "asian"),
paste0(input, "other"))
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
paste0(input, "white"),
paste0(input, "amerindian"),
paste0(input, "black"),
paste0(input, "asian"),
paste0(input, "other"))
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
View(dataset)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
View(dataset)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- rename(dataset, state = Group.1)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
View(dataset)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
View(dataset)
dataset <- dataset %>%
rename(state = Group.1,
White = popwhite,
american_indian = popamerindian,
Black = popblack,
Asian = popasian,
Other = popother)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
dataset <- dataset %>%
rename(state = Group.1,
White = popwhite,
American_indian = popamerindian,
Black = popblack,
Asian = popasian,
Other = popother)
races <- c("White",
"American Indian",
"Black",
"Asian",
"Other")
Averages <- c(dataset[, 2],
dataset[, 3],
dataset[, 4],
dataset[, 5],
dataset[, 6])
View(dataset)
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
plot <- poverty_barplot(midwest, midwest$poppovertyknown, "rgb(255, 153, 153)")
dataset <- midwest %>%
select(state, input_y)
dataset <- midwest %>%
select(state, poppovertyknown)
View(dataset)
dataset <- aggregate(dataset[, 2], by = list(dataset$state), mean)
dataset <- rename(dataset, state = Group.1)
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[1, 1,] <- state.name[grep(dataset[1, 1,], state.abb)]
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
View(dataset)
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[1, 1] <- state.name[grep(dataset[1, 1], state.abb)]
View(dataset)
dataset[2, 1] <- state.name[grep(dataset[2, 1], state.abb)]
View(dataset)
dataset[3, 1] <- state.name[grep(dataset[3, 1], state.abb)]
dataset[4, 1] <- state.name[grep(dataset[4, 1], state.abb)]
dataset[5, 1] <- state.name[grep(dataset[5, 1], state.abb)]
percentages <- c(dataset[1, 2,],
dataset[2, 2,],
dataset[3, 2,],
dataset[4, 2,],
dataset[5, 2,])
plot <- poverty_barplot(midwest, midwest$poppovertyknown, "rgb(255, 153, 153)")
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/TeamBD5-Final-Project')
searched_tweets <- searchTwitter("trump",
n = 100)
tweets <- twListToDF(searched_tweets)
View(searched_tweets)
View(searched_tweets)
View(tweets)
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
library(gsubfn)
install.packages("gsubfn")
library(gsubfn)
library(gsubfn)
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
View(tweets)
runApp('info201/TeamBD5-Final-Project')
=======
shiny::runApp('C:/Users/pakus/Desktop/ch16-shiny/exercise-3')
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_var]]
y <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size =  input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('C:/Users/pakus/Desktop/ch16-shiny/exercise-3')
setwd("C:/Users/pakus/Desktop/TeamBD5-Final-Project")
# Use something like this for data:
liberal_df <- twListToDF(liberal_tweets)
library(httr)
library(jsonlite)
library(twitteR)
# Use something like this for data:
liberal_df <- twListToDF(liberal_tweets)
liberal_tweets <- searchTwitter("#Liberals")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
# Use something like this for data:
liberal_df <- twListToDF(liberal_tweets)
liberal_tweets <- searchTwitter("#Liberals")
# Use something like this for data:
liberal_df <- twListToDF(liberal_tweets)
liberal_df
conservative_tweets <- searchTwitter("#Conservatives")
conservative_df <- twListToDF(conservative_tweets)
conservative_tweets <- searchTwitter("#Conservatives")
liberal_tweets <- searchTwitter("#Liberals")
gun_control_tweets <- searchTwitter("#gun control")
anti_gun_control_tweets <- searchTwitter("#noguncontrol")
abortion_tweets <- searchTwitter("#abortion")
anti_abortion_tweets <- searchTwitter("#noabortion")
liberal_df <- twListToDF(liberal_tweets)
conservative_df <- twListToDF(conservative_tweets)
gun_control_df <- twListToDF(gun_control_tweets)
anti_gun_control_df <-twListToDF(anti_gun_control_tweets)
abortion_df <- twListToDF(abortion_tweets)
anti_abortion_df <- twListToDF(anti_abortion_df)
anti_abortion_df <- twListToDF(anti_abortion_tweets)
all_data_merged <- merge(liberal_df,conservative_df,gun_control_df, anti_gun_control_df, abortion_df, anti_abortion_df)
all_data_merged <- merge(liberal_df,conservative_df,gun_control_df)
rbind(liberal_df, conservative_df, gun_control_df)
all_data_merged <- rbind(liberal_df, conservative_df, gun_control_df, anti_gun_control_df, abortion_df, anti_abortion_df)
View(all_data_merged)
shiny::runApp()
ggplot(all_data_merged, aes(x=tweets, y=retweetcount)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
library(ggplot2)
ggplot(all_data_merged, aes(x=tweets, y=retweetcount)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
all_data_merged
ggplot(all_data_merged, aes(x=text, y=retweetcount)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(all_data_merged, aes(x=text, y=retweetCount)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(all_data_merged, aes(x=text, y=retweetCount)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
>>>>>>> b937b5c249117428782f70b9712055d45cbd8ab8
