<<<<<<< HEAD
res
boxplot(first, second, third, fourth)
boxplot(first, second, third, fourth)
dat <- data.frame(first, second, third, fourth)
dat
aov.1 <- aov(dat)
?aov
first <- rep("first", 5)
first
first <- rep("first", 5)
second <- rep("second", 4)
third <- rep("third", 4)
fourth <- rep("fourth", 5)
Category <- c(first, second, third, fourth)
Category
first <- rep(1.6, 5)
second <- rep(3.8, 4)
third <- rep(6.0, 4)
fourth <- rep(10.2, 5)
Category <- c(first, second, third, fourth)
Category
this1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
this2 <- c( 55.2, 59.1, 52.8, 54.4)
this3 <- c(51.7, 48.4, 53.9, 49.0)
this4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
Temperature <- c(this1, this2, this3, this4)
Temperature
data <- data.frame(Category, Temperature)
data
aov.1 <- aov(Temperature ~ Category, data = data)
aov.1
summary(aov.1)
aov.1 <- aov(Temperature ~ as.factor(Category), data = data)
aov.1
summary(aov.1)
mu.hat <- mean(Temperature)
mu.first <- mean(this1)
mu.second <- mean(this2)
mu.third <- mean(this3)
my.fourth <- mean(this4)
method.means <- c(mu.first, mu.second, mu.third, mu.fourth)
mu.fourth <- mean(this4)
method.means <- c(mu.first, mu.second, mu.third, mu.fourth)
total.mean <- rep(mean(c(this.1, this.2, this.3, this.4)), 4)
total.mean <- rep(mean(c(this1, this2, this3, this4)), 4)
total.mean
level.means <- c(mu.first, mu.second, mu.third, mu.fourth)
total.mean <- rep(mean(c(this1, this2, this3, this4)), 4)
MSwitin1 = (this1-mean(this1))
MSwitin1
MSwithin1 = (this1-mean(this1))^2
MSwithin2 = (this2 - mean(this2)^2)
MSwithin3 = (this3 - mean(this3)^2)
MSwithin4 = (this4 - mean(this4)^2)
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4)
MSwithin
MSwithin1
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum((this2 - mean(this2)^2))
MSwithin3 = sum((this3 - mean(this3)^2))
MSwithin4 = sum((this4 - mean(this4)^2))
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4)
MSwithin
MSwithin1
MSwithin2
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum(((this2 - mean(this2))^2))
MSwithin2
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum(((this2 - mean(this2))^2))
MSwithin3 = sum(((this3 - mean(this3))^2))
MSwithin4 = sum(((this4 - mean(this4))^2))
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4)
MSwithin
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4) * (18-4)
Fstat = MSbetween / MSwithin
MSbetween = ((level.means-total.mean)^2)/(3)
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum(((this2 - mean(this2))^2))
MSwithin3 = sum(((this3 - mean(this3))^2))
MSwithin4 = sum(((this4 - mean(this4))^2))
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4) * (18-4)
Fstat = MSbetween / MSwithin
Fstat
MSbetween
MSbetween = sum((level.means-total.mean)^2)/(3)
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum(((this2 - mean(this2))^2))
MSwithin3 = sum(((this3 - mean(this3))^2))
MSwithin4 = sum(((this4 - mean(this4))^2))
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4) * (18-4)
Fstat = MSbetween / MSwithin
Fstat
summary(aov.1)
MSbetween
MSwithin
Fstat = MSbetween / MSwithin
Fstat
MSbetween = sum((level.means-total.mean)^2)/(3)
MSwithin1 = sum((this1-mean(this1))^2)
MSwithin2 = sum(((this2 - mean(this2))^2))
MSwithin3 = sum((this3 - mean(this3))^2)
MSwithin4 = sum((this4 - mean(this4))^2)
MSwithin = sum(MSwithin1, MSwithin2, MSwithin3, MSwithin4) * (18-4)
Fstat = MSbetween / MSwithin
Fstat
mean(0.0011, .0014,.0018,.0022,.0010,.0016,.0028,.0020,.0015,.0014,.0023,.0017,.0020)
mean(0.0011, .0014,.0018,.0022,.0010,.0016,.0028,.0020,.0015,.0014,.0023,.0017,.0020)
mean(c(0.0011, 0.0014,0.0018,0.0022,0.0010,0.0016,.0028,.0020,.0015,.0014,.0023,.0017,.0020))
mean(c(.0011,.0010,.0019,.0013,.0011,.0017,.0024,.0020,.0013,.0013,.0017,.0015,.0013))
sd(c(0.0011, 0.0014,0.0018,0.0022,0.0010,0.0016,.0028,.0020,.0015,.0014,.0023,.0017,.0020))
sd(c(.0011,.0010,.0019,.0013,.0011,.0017,.0024,.0020,.0013,.0013,.0017,.0015,.0013))
standard <- c(0.0011, 0.0014,0.0018,0.0022,0.0010,0.0016,.0028,.0020,.0015,.0014,.0023,.0017,.0020)
perforated <- c(.0011,.0010,.0019,.0013,.0011,.0017,.0024,.0020,.0013,.0013,.0017,.0015,.0013)
sd(standard-perforated)
mean(standard) - mean(perforated)
matrix <- matrix[]
for (i in 1:10) {
matrix[i] <- (5.5-(i-5.5))/30
}
matrix[] <- matrix[]
matrix <- c()
for (i in 1:10) {
matrix[i] <- (5.5-(i-5.5))/30
}
matrix
for (i in 1:10) {
matrix[i] <- (5.5-(i-5.5))
}
matrix
matrix*200
for (i in 1:10) {
matrix[i] <- (5.5-(i-5.5))/30
}
matrix*200
sum(((observed-matrix)^2)/matrix)
observed <- c(4,15,23,25,38,31,32,14,10,8)
sum(((observed-matrix)^2)/matrix)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0)) set.seed(123)
for(trial in 1:n.trial){
y_obs = y_true + rnorm(n,0,sigma_eps) lm.1 = lm(y_obs ~ x)
plot(x, y_ob) abline(10,2, col=2) abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial){
y_obs = y_true + rnorm(n,0,sigma_eps) lm.1 = lm(y_obs ~ x)
plot(x, y_ob) abline(10,2, col=2) abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
plot(x, y_ob)
abline(10,2, col=2) abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
plot(x, y_ob)
abline(10,2, col=2)
abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
plot(x, y_obs)
abline(10,2, col=2)
abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
plot(x, y_obs)
abline(10,2, col=2)
abline(lm.1, col=4) }
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
plot(x, y_obs)
lm.1
lm.1
print(lm.1)
summarize(lm.1)
summary(lm.1)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
summary(lm.1)
plot(x, y_obs)
}
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
summary(lm.1)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
plot(x, y_obs)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
summary(lm.1)
werwerwer
werwerwer
werwerwer
werwerwer
werwerwer
wefwe
n = 100
n
n = 100
n
n = 100
n
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
summary(lm.1)
plot(x, y_obs)
}
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x)
summary(lm.1)
summary(lm.1)$coefficients
length(summary(lm.1)$coefficients[])
names(summary(lm.1))
summary(lm.1)$terms
lm.1)$coefficients
lm.1$coefficients
lm.1 = lm(y_obs ~ x + x^2)
summary(lm.1)
summary(lm.1)
lm.1 = lm(y_obs ~ x + x^2)
summary(lm.1)
lm.1
lm.1$coefficients
plot(lm.1)
names(summary(lm.1))
names(summary(lm.1))
names(summary(lm.1))
lm.1$terms
summary(lm.1)
n = 100
n
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
set.seed(123)
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x + x^2)
summary(lm.1)
n = unif(1:100)
n = runif(1:100)
n
n = runif(1,100)
n = runif(100,1,100)
n
lm.1 = lm(y_obs ~ x + n)
summary(lm.1)
lm.1 = lm(y_obs ~ x + I(x^2))
summary(lm.1)
lm.1 = lm(y_obs ~ x + I(x^2))
summary(lm.1)
y_true = 20 + 2*x + 0.1*x^2
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
summary(lm.1)
n = 100
n
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
set.seed(123)
y_obs = y_true + rnorm(1,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
summary(lm.1)
summary(lm.1)$coefficient
summary(lm.1)$coefficients
summary(lm.1)$coefficients
summary(lm.1)$coefficients
lm.1 = lm(y_obs ~ x)
summary(lm.1)$coefficients
summary(lm.1)$coefficients[1]
summary(lm.1)$coefficients[2]
n = 100
n
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta1[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
n = 100
n
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
beta1 <- beta1[]
beta2 <- beta2[]
alpha <- alpha[]
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta1[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
beta1 <- c()
beta2 <- c()
alpha <- c()
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta1[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
n = 100
n.trial = 5000
x = c(1:n)
y_true = 20 + 2*x + 0.1*x^2
sigma_eps = 15
par(mfrow=c(8,8),mar=c(0,0,0,0))
set.seed(123)
beta1 <- c()
beta2 <- c()
alpha <- c()
for(trial in 1:n.trial) {
y_obs = y_true + rnorm(n,0,sigma_eps)
lm.1 = lm(y_obs ~ x + I(x^2))
alpha[trial] = summary(lm.1$coefficients[1])
beta1[trial] = summary(lm.1$coefficients[2])
beta2[trial] = summary(lm.1$coefficients[3])
}
hist(alpha)
hist(beta1)
hist(beta2)
qnorm(alpha)
qqnorm(alpha)
qqnorm(beta2)
qqnorm(beta1)
mean(alpha)
mean(beta1)
mean(beta2)
summary(lm.1)
summary(lm.1)
summary(lm.1)
sd(beta1)
predict(lm.1)
SXX <- sum((beta1 - mean(beta1))^2)
SXX
sd(beta1)
0.2/sqrt(SXX)
SXX
summary(lm.1)
tweets_geolocated <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=1, lang="en", since="2014-08-20")
library(httr)
library(jsonlite)
library(twitteR)
source("api-keys.R")
conservative_tweets <- searchTwitter("#Conservatives")
conservative.df <- twListToDF(conservative_tweets)
liberal_tweets <- searchTwitter("#Liberals")
liberal_df <- twListToDF(liberal_tweets)
gun_control_tweets <- searchTwitter("#gun control")
gun_control_df <- twListToDF(gun_control_tweets)
anti_gun_control_tweets <- searchTwitter("#noguncontrol")
anti_gun_control_df <- twListToDF(anti_gun_control_tweets)
abortion_tweets <- searchTwitter("#abortion")
anti_abortion_df <- twListToDF(abortion_tweets)
anti_abortion_tweets <- searchTwitter("#noabortion")
anti_gun_control_df <- twListToDF(anti_gun_control_tweets)
tweets_geolocated <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=1, lang="en", since="2014-08-20")
tweets_geo <- twListToDF(tweets_geolocated)
library(httr)
library(jsonlite)
library(twitteR)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
conservative_tweets <- searchTwitter("#Conservatives")
conservative.df <- twListToDF(conservative_tweets)
liberal_tweets <- searchTwitter("#Liberals")
liberal_df <- twListToDF(liberal_tweets)
gun_control_tweets <- searchTwitter("#gun control")
gun_control_df <- twListToDF(gun_control_tweets)
anti_gun_control_tweets <- searchTwitter("#noguncontrol")
anti_gun_control_df <- twListToDF(anti_gun_control_tweets)
abortion_tweets <- searchTwitter("#abortion")
anti_abortion_df <- twListToDF(abortion_tweets)
anti_abortion_tweets <- searchTwitter("#noabortion")
anti_gun_control_df <- twListToDF(anti_gun_control_tweets)
tweets_geolocated <- searchTwitter("Obamacare OR ACA OR 'Affordable Care Act' OR #ACA", n=1, lang="en", since="2014-08-20")
tweets_geo <- twListToDF(tweets_geolocated)
library(httr)
library(jsonlite)
library(twitteR)
source("api-keys.R")
setwd("~/Documents/INFO201/TeamBD5-Final-Project")
library(httr)
library(jsonlite)
library(twitteR)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
source("api-keys.R")
<<<<<<< HEAD
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
conservative_tweets <- searchTwitter("#Conservatives")
conservative.df <- twListToDF(conservative_tweets)
conservative.df
=======
base_uri <- "https://api.twitter.com/1.1"
endpoint <- "/search/tweets.json"
endpoint <- "/search/tweets.json"
query_params <- "/oauth2/token"
civic_response <- GET(paste0(base_uri, endpoint))
rm(civic_response)
twitter_response <- GET(paste0(base_uri, endpoint))
twitter_content <- content(twitter_response, "text")
twitter_data <- fromJSON(twitter_content)
View(twitter_response)
twitter_response
twitter_data
# Converted to Data Frames
liberal_df <- twListToDF(liberal_tweets)
library(httr)
library(jsonlite)
library(twitteR)
install.packages(twitteR)
install.packages("twitteR")
library(httr)
library(jsonlite)
# install.packages("twitteR")
library(twitteR)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
library(httr)
library(jsonlite)
# install.packages("twitteR")
library(twitteR)
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
# Grabbed the required
conservative_tweets <- searchTwitter("#Conservatives")
conservative_tweets
conservative_df <- twListToDF(conservative_tweets)
View(conservative_df)
library(httr)
library(jsonlite)
# install.packages("twitteR")
library(twitteR)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
library(httr)
library(jsonlite)
# install.packages("twitteR")
library(twitteR)
source("api-keys.R")
setup_twitter_oauth(consumer_public, consumer_private, public_key, private_key)
shiny::runApp()
runApp()
runApp()
runApp()
tweets <- searchTwitter("Conservatives")
searched_tweets <- searchTwitter("Conservatives")
=======
car_styled <- data.frame(c(paste("**", cars$speed, "**"), paste("_", cars$dist, "_")))
View(car_styled)
car_styled <- data.frame(paste("**", cars$speed, "**"))
View(car_styled)
df <- paste("**", cars$speed, "**")
car_styled <-data.frame(df)
View(car_styled)
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars$speed <- paste("**", cars$speed, "**", sep = "")
cars$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars$speed <- paste("**", cars$speed, "**", sep = "")
cars$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars
View(cars_styled)
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_styled <-  c(paste("**", cars$speed, "**", sep = ""), paste("_", cars$dist, "_", sep = ""))
cars_mark <- cars %>%
paste("**", cars$speed, "**", sep = "") %>%
paste("_", cars$dist, "_", sep = "")
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars_mark$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars_mark$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_mark <- cars
cars_mark$speed <- paste("**", cars_mark$speed, "**", sep = "") %>%
cars_mark$dist <- paste("_", cars_mark$dist, "_", sep = "")
cars_styled <- cars_mark
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
cars_styled <- cars
make_hist <- function(column) {
hist(column, main = "Histogram of Speed", xlab = "Speed (mph)",
ylab = "Number of Cars")
}
mean_speed <- round(sum(cars$speed) / nrow(cars), digits = 1)
car_speed <- paste("**", cars$speed, "**", sep = "")
car_dist<- paste("_", cars$dist, "_", sep = "")
cars_styled <- data.frame(car_speed, car_dist)
View(cars_styled)
View(cars_styled)
install.packages("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage()
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage()
View(ui)
shiny::runApp('info201/ch16-shiny/exercise-3')
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mtcars$mpg)
runApp('info201/ch16-shiny/exercise-3')
runApp('info201/ch16-shiny/exercise-3')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
runApp('info201/ch16-shiny/exercise-5')
shiny::runApp('info201/ch16-shiny/exercise-5')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
View(midwest)
?midwest
library(dplyr)
library(ggplot2)
library(plotly)
# Constructing the dataframe with relevant columns
midwest <- midwest %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
midwest <- aggregate(midwest[, 2:6], by = list(midwest$state), mean)
midwest[1, 1] <- state.name[grep(midwest[1, 1], state.abb)]
midwest[2, 1] <- state.name[grep(midwest[2, 1], state.abb)]
midwest[3, 1] <- state.name[grep(midwest[3, 1], state.abb)]
midwest[4, 1] <- state.name[grep(midwest[4, 1], state.abb)]
midwest[5, 1] <- state.name[grep(midwest[5, 1], state.abb)]
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204,204,204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
data <- midwest$state
View(midwest)
rename(midwest, Group.1 = "state")
rename(midwest$Group.1, Group.1 = "state")
rename(midwest, Group.1 = "state")
View(midwest)
rename(midwest, state = Group.1)
midwest <- rename(midwest, state = Group.1)
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(204,204,204)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204,204,204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
p <- plot_ly(midwest,
x = midwest$state,
y = midwest[2,],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3,],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[4,],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[5,],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[6,],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
p
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[,2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[,3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[,4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[,5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[,6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot <- plot_ly(midwest,
x = midwest$state,
y = midwest[,2],
type = 'bar',
name = 'White',
marker = list(color = 'rgb(49, 130, 189)')) %>%
add_trace(y = midwest[,3],
name = 'Black',
marker = list(color = 'rgb(153, 255, 153)')) %>%
add_trace(y = midwest[,4],
name = 'American Indian',
marker = list(color = 'rgb(255, 178, 102)')) %>%
add_trace(y = midwest[,5],
name = 'Asian',
marker = list(color = 'rgb(255, 255, 153)')) %>%
add_trace(y = midwest[,6],
name = 'Other',
marker = list(color = 'rgb(204, 204, 204)')) %>%
layout(yaxis = list(title = 'Racial Demographics'), barmode = 'group')
bar_plot
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
library(dplyr)
library(ggplot2)
library(plotly)
View(midwest)
library(dplyr)
library(ggplot2)
library(plotly)
View(midwest)
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
colnames(midwest)
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/ch16-shiny/exercise-5')
View(midwest)
?midwest
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
dataset <- midwest %>%
filter(state == input_state) %>%
select(state,
paste0(input, "white"),
paste0(input, "amerindian"),
paste0(input, "black"),
paste0(input, "asian"),
paste0(input, "other"))
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
paste0(input, "white"),
paste0(input, "amerindian"),
paste0(input, "black"),
paste0(input, "asian"),
paste0(input, "other"))
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- midwest %>%
filter(state == "FL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
View(dataset)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
View(dataset)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- rename(dataset, state = Group.1)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
View(dataset)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
View(dataset)
dataset <- dataset %>%
rename(state = Group.1,
White = popwhite,
american_indian = popamerindian,
Black = popblack,
Asian = popasian,
Other = popother)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
dataset <- midwest %>%
filter(state == "IL") %>%
select(state,
popwhite,
popamerindian,
popblack,
popasian,
popother)
dataset <- aggregate(dataset[, 2:6], by = list(dataset$state), mean)
dataset <- dataset %>%
rename(state = Group.1,
white = popwhite,
american_indian = popamerindian,
black = popblack,
asian = popasian,
other = popother)
dataset <- dataset %>%
rename(state = Group.1,
White = popwhite,
American_indian = popamerindian,
Black = popblack,
Asian = popasian,
Other = popother)
races <- c("White",
"American Indian",
"Black",
"Asian",
"Other")
Averages <- c(dataset[, 2],
dataset[, 3],
dataset[, 4],
dataset[, 5],
dataset[, 6])
View(dataset)
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
plot <- poverty_barplot(midwest, midwest$poppovertyknown, "rgb(255, 153, 153)")
dataset <- midwest %>%
select(state, input_y)
dataset <- midwest %>%
select(state, poppovertyknown)
View(dataset)
dataset <- aggregate(dataset[, 2], by = list(dataset$state), mean)
dataset <- rename(dataset, state = Group.1)
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[1, 1,] <- state.name[grep(dataset[1, 1,], state.abb)]
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
View(dataset)
dataset[, 1, 1] <- state.name[grep(dataset[, 1, 1], state.abb)]
dataset[1, 1] <- state.name[grep(dataset[1, 1], state.abb)]
View(dataset)
dataset[2, 1] <- state.name[grep(dataset[2, 1], state.abb)]
View(dataset)
dataset[3, 1] <- state.name[grep(dataset[3, 1], state.abb)]
dataset[4, 1] <- state.name[grep(dataset[4, 1], state.abb)]
dataset[5, 1] <- state.name[grep(dataset[5, 1], state.abb)]
percentages <- c(dataset[1, 2,],
dataset[2, 2,],
dataset[3, 2,],
dataset[4, 2,],
dataset[5, 2,])
plot <- poverty_barplot(midwest, midwest$poppovertyknown, "rgb(255, 153, 153)")
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
runApp('info201/a8-shiny-chongmic')
shiny::runApp('info201/TeamBD5-Final-Project')
searched_tweets <- searchTwitter("trump",
n = 100)
>>>>>>> 1b95e8472aed77232edd2124c486ef8165a8d2dc
tweets <- twListToDF(searched_tweets)
View(searched_tweets)
View(searched_tweets)
View(tweets)
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
library(gsubfn)
install.packages("gsubfn")
library(gsubfn)
library(gsubfn)
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
sample_tweets <- searchTwitter("Trump",
n = 100,
geocode = TRUE)
View(tweets)
<<<<<<< HEAD
runApp()
searched_tweets <- searchTwitter("tesla",
n = 15)
tweets <- twListToDF(searched_tweets)
filter(tweets, screenName, text)
runApp()
runApp('~/info201/ch16-shiny/exercise-5')
runApp()
runApp()
runApp()
runApp()
runApp('~/info201/ch16-shiny/exercise-5')
runApp('~/info201/ch16-shiny/exercise-5')
runApp()
>>>>>>> 4707f732808cdd6b086bffa0027b2dc263016f82
=======
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
install.packages("tidytext")
install.packages("ggpubr")
install.packages("tidyr")
source('~/info201/TeamBD5-Final-Project/scripts/SamPartFinalINFO201.R')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
shiny::runApp('info201/TeamBD5-Final-Project')
runApp('info201/TeamBD5-Final-Project')
>>>>>>> 1b95e8472aed77232edd2124c486ef8165a8d2dc
