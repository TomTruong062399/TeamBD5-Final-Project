shiny::runApp('C:/Users/pakus/Desktop/ch16-shiny/exercise-3')
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_var]]
y <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size =  input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('C:/Users/pakus/Desktop/ch16-shiny/exercise-3')
shinyServer(
function(input, output) {
output$key_tweets <- renderTable({
return(term_search(input$term))
})
tweets <- reactive({
popular <- return(term_top_5(input$top_5, input$quantity))
})
output$tweets_plot <- renderPlotly({
return(plot_tweets(tweets()))
})
output$tweets_tbl <- renderTable({
tweets()[, c("Twitter Handle", "Tweet", "Number of Retweets")]
})
output$plot <- renderPlot({
tweet_info <- searchTwitter(paste0("#", input$term), 30)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = anti_gun_control_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
total_score <- tweet_score$score * tweet_score$n
# I would like to point out that it was NOT easy to get those colors right
positivity_plot <- ggplot(data = tweet_score, aes(x=factor(word), y = total_score)) +
geom_bar(aes(fill = total_score < 0), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(guide = FALSE, breaks = c(TRUE, FALSE), values=c("green", "red")) +
labs(x = "Most Common Words in Tweets",
y = "Positivity Score",
title = "Positivity of Tweets",
fill = "Positivity")
# Using only 3 through 8 since 'positive' and 'negative are by
# far the most popular sentiments, although they cannot be used
sentiment <- ggplot(binary_sentiment[3:8,], aes(x = rev(factor(word, levels = unique(word))), y = n)) +
geom_bar(stat= "identity", aes(fill = sentiment)) +
coord_flip() +
labs(x = "Most Common Emotions",
y = "Frequency",
title = "Emotions Conveyed by Tweets",
fill = "Positivity")
ggarrange(sentiment, positivity_plot,
labels = c("A", "B"),
ncol = 2, nrow = 1)
})
}
)
shiny::runApp('C:/Users/pakus/Desktop/TeamBD5-Final-Project')
setwd("C:/Users/pakus/Desktop/TeamBD5-Final-Project")
runApp()
runApp()
runApp()
runApp()
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_info <- searchTwitter(paste0("#", "butt"), 30)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
binary_sentiment
tweet_info <- searchTwitter(paste0("#", "Clinton"), 30)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
binary_sentiment
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- shinyUI(
navbarPage(
"Project Name Here",
tabPanel(
"Sample by Term",
titlePanel("Sample 100 Tweets/Retweets by Term"),
sidebarLayout(
sidebarPanel(
textInput("term",
label = "Search for a Term",
value = "Trump"
)
),
mainPanel(
tableOutput("key_tweets")
)
)
),
tabPanel(
"HashTag",
titlePanel("HashTag"),
sidebarLayout(
sidebarPanel(
width = 3,
textInput(inputId = "hashtag", "Which hashtag would you like to look up?")
),
mainPanel(
plotOutput("plot")
plotOutput("plot2")
)
)
),
tabPanel(
"Most Retweeted",
titlePanel("Top 5 Tweets/Retweets by Retweets"),
sidebarLayout(
sidebarPanel(
textInput("top_5",
label = "Top 5 Tweets/Retweets from a Random Sample",
value = "Trump"
),
sliderInput("quantity",
label = "Select of Sample Size",
min = 1,
max = 1000,
value = 500,
ticks = TRUE,
animate = FALSE
)
),
mainPanel(
plotlyOutput("tweets_plot"),
tableOutput("tweets_tbl")
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
bar_plot <-ggplot(popular_tweets, aes("Tweet", "Retweet Count"))
popular_tweets <- popular_tweets %>%
select(text, retweetCount) %>%
rename("Retweet Count" = retweetCount,
"Tweet" = text)
popular_tweets <- popular_tweets %>%
select(text, retweetCount) %>%
rename("Retweet Count" = retweetCount,
"Tweet" = text)
popular_tweets <- twListToDF(sample_tweets)
sample_tweets <- searchTwitter(input$hashtag)
styler:::style_active_file()
sample_tweets <- searchTwitter(input$hashtag)
popular_tweets <- popular_tweets %>%
select(text, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = text
)
bar_plot + geom_bar(stat = "identity")
runApp()
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
runApp()
setwd("C:/Users/pakus/Desktop/TeamBD5-Final-Project")
popular_tweets <- twListToDF(tweet_info)
popular_tweets <- popular_tweets %>%
select(scr, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = text
)
popular_tweets <- popular_tweets %>%
select(scr, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = text
)
popular_tweets <- popular_tweets %>%
select(text, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = text
)
bar_plot <- ggplot(popular_tweets, aes("Tweet", "Retweet Count"))
bar_plot + geom_bar(stat = "identity")
runApp()
runApp()
bar_plot + geom_bar(stat = "identity")
bar_plot <- ggplot(popular_tweets, aes("Tweet", "Retweet Count"))
bar_plot + geom_bar(stat = "identity")
popular_tweets <- popular_tweets %>%
select(screenName, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = screenName
)
popular_tweets <- popular_tweets %>%
select(screenName, retweetCount) %>%
rename(
"Retweet Count" = retweetCount,
"Tweet" = screenName
)
popular_tweets <- popular_tweets %>%
select(screenName, retweetCount)
popular_tweets <- popular_tweets %>%
select(screenName)
popular_tweets <- twListToDF(tweet_info)
bar_stuff <- popular_tweets %>%
select(screenName)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount) %>%
rename("Screen Name" = screenName,
"Retweet Count" = retweetCount)
bar_plot <- ggplot(popular_tweets, aes("Screen Name", "Retweet Count"))
bar_plot + geom_bar(stat = "identity")
runApp()
bar_stuff
bar_plot <- ggplot(bar_stuff, aes("Screen Name", "Retweet Count"))
bar_plot + geom_bar(stat = "identity")
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity")
runApp()
runApp()
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
runApp()
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggarrange(sentiment, positivity_plot, bar_plot,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2
)
shinyServer(
function(input, output) {
output$key_tweets <- renderTable({
return(term_search(input$term))
})
tweets <- reactive({
popular <- return(term_top_5(input$top_5, input$quantity))
})
output$tweets_plot <- renderPlotly({
return(plot_tweets(tweets()))
})
output$tweets_tbl <- renderTable({
tweets()[, c("Twitter Handle", "Tweet", "Number of Retweets")]
})
output$plot <- renderPlot({
tweet_info <- searchTwitter(paste0("#", input$hashtag), 30)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
total_score <- tweet_score$score * tweet_score$n
# I would like to point out that it was NOT easy to get those colors right
positivity_plot <- ggplot(data = tweet_score, aes(x = factor(word), y = total_score)) +
geom_bar(aes(fill = total_score < 0), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(guide = FALSE, breaks = c(TRUE, FALSE), values = c("green", "red")) +
labs(
x = "Most Common Words in Tweets",
y = "Positivity Score",
title = "Positivity of Tweets",
fill = "Positivity"
)
# Using only 3 through 8 since 'positive' and 'negative are by
# far the most popular sentiments, although they cannot be used
sentiment <- ggplot(binary_sentiment[3:8, ], aes(x = rev(factor(word, levels = unique(word))), y = n)) +
geom_bar(stat = "identity", aes(fill = factor(sentiment))) +
coord_flip() +
labs(
x = "Most Common Emotions",
y = "Frequency",
title = "Emotions Conveyed by Tweets",
fill = "Positivity"
)
popular_tweets <- twListToDF(tweet_info)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggarrange(sentiment, positivity_plot, bar_plot,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2
)
})
}
)
runApp()
runApp()
runApp()
search <- searchTwitter(input$hashtag)
search <- searchTwitter(input$hashtag)
popular_tweets <- twListToDF(search)
shinyServer(
function(input, output) {
output$key_tweets <- renderTable({
return(term_search(input$term))
})
tweets <- reactive({
popular <- return(term_top_5(input$top_5, input$quantity))
})
output$tweets_plot <- renderPlotly({
return(plot_tweets(tweets()))
})
output$tweets_tbl <- renderTable({
tweets()[, c("Twitter Handle", "Tweet", "Number of Retweets")]
})
output$plot <- renderPlot({
tweet_info <- searchTwitter(paste0("#", input$hashtag), 30)
tweet_info_df <- twListToDF(tweet_info)
text <- data_frame(tweet = tweet_info_df$text) %>%
unnest_tokens(word, tweet)
tweet_score <- text %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
count(word, score, sort = TRUE) %>%
ungroup()
# I split these up for clarity, although they could be combined
tweet_sentiment <- text %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(sentiment, sort = TRUE) %>%
ungroup() %>%
rename(word = sentiment)
binary_sentiment <- tweet_sentiment %>%
inner_join(get_sentiments("bing"), by = "word") %>%
ungroup()
total_score <- tweet_score$score * tweet_score$n
# I would like to point out that it was NOT easy to get those colors right
positivity_plot <- ggplot(data = tweet_score, aes(x = factor(word), y = total_score)) +
geom_bar(aes(fill = total_score < 0), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(guide = FALSE, breaks = c(TRUE, FALSE), values = c("green", "red")) +
labs(
x = "Most Common Words in Tweets",
y = "Positivity Score",
title = "Positivity of Tweets",
fill = "Positivity"
)
# Using only 3 through 8 since 'positive' and 'negative are by
# far the most popular sentiments, although they cannot be used
sentiment <- ggplot(binary_sentiment[3:8, ], aes(x = rev(factor(word, levels = unique(word))), y = n)) +
geom_bar(stat = "identity", aes(fill = factor(sentiment))) +
coord_flip() +
labs(
x = "Most Common Emotions",
y = "Frequency",
title = "Emotions Conveyed by Tweets",
fill = "Positivity"
)
popular_tweets <- twListToDF(tweet_info)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggarrange(sentiment, positivity_plot, bar_plot,
labels = c("A", "B", "C"),
ncol = 2, nrow = 2
)
})
output$plot2 <- renderPlot({
search <- searchTwitter(input$hashtag)
popular_tweets <- twListToDF(search)
bar_stuff <- popular_tweets %>%
select(screenName, retweetCount)
bar_plot <- ggplot(bar_stuff, aes(screenName, retweetCount))
bar_plot + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
}
)
runApp()
bar_plot + geom_bar(stat = "identity",fill = "#FF6666") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
bar_plot + geom_bar(stat = "identity",fill = "#FF6666") +
xlab("Usernames") +
ylab("Retweet Count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
styler:::style_active_file()
